import java.util.*;

class Stock {
    String symbol;
    double price;

    Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }
}

class Portfolio {
    Map<String, Integer> holdings = new HashMap<>();
    double balance;

    Portfolio(double balance) {
        this.balance = balance;
    }

    void buyStock(Stock stock, int quantity) {
        double cost = stock.price * quantity;
        if (cost > balance) {
            System.out.println("‚ùå Not enough balance to buy " + quantity + " shares of " + stock.symbol);
            return;
        }
        balance -= cost;
        holdings.put(stock.symbol, holdings.getOrDefault(stock.symbol, 0) + quantity);
        System.out.println("‚úÖ Bought " + quantity + " shares of " + stock.symbol);
    }

    void sellStock(Stock stock, int quantity) {
        if (!holdings.containsKey(stock.symbol) || holdings.get(stock.symbol) < quantity) {
            System.out.println("‚ùå You don‚Äôt own enough shares of " + stock.symbol);
            return;
        }
        balance += stock.price * quantity;
        holdings.put(stock.symbol, holdings.get(stock.symbol) - quantity);
        System.out.println("‚úÖ Sold " + quantity + " shares of " + stock.symbol);
    }

    void showPortfolio(Map<String, Stock> market) {
        System.out.println("\nüìä --- Portfolio Summary ---");
        System.out.println("Balance: $" + balance);
        for (String symbol : holdings.keySet()) {
            int qty = holdings.get(symbol);
            double value = qty * market.get(symbol).price;
            System.out.println(symbol + " - " + qty + " shares (Value: $" + value + ")");
        }
        System.out.println("---------------------------\n");
    }
}

public class StockTradingPlatform {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Simulated stock market
        Map<String, Stock> market = new HashMap<>();
        market.put("AAPL", new Stock("AAPL", 150));
        market.put("GOOG", new Stock("GOOG", 2800));
        market.put("TSLA", new Stock("TSLA", 700));

        Portfolio portfolio = new Portfolio(5000); // Starting balance

        System.out.println("=== Stock Trading Platform ===");

        while (true) {
            System.out.println("\n1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Choose option: ");
            int choice = sc.nextInt();

            if (choice == 1) {
                System.out.println("\nüìà Market Data:");
                for (Stock stock : market.values()) {
                    System.out.println(stock.symbol + " - $" + stock.price);
                }
            } else if (choice == 2) {
                System.out.print("Enter stock symbol: ");
                String symbol = sc.next().toUpperCase();
                if (market.containsKey(symbol)) {
                    System.out.print("Enter quantity: ");
                    int qty = sc.nextInt();
                    portfolio.buyStock(market.get(symbol), qty);
                } else {
                    System.out.println("‚ùå Stock not found.");
                }
            } else if (choice == 3) {
                System.out.print("Enter stock symbol: ");
                String symbol = sc.next().toUpperCase();
                if (market.containsKey(symbol)) {
                    System.out.print("Enter quantity: ");
                    int qty = sc.nextInt();
                    portfolio.sellStock(market.get(symbol), qty);
                } else {
                    System.out.println("‚ùå Stock not found.");
                }
            } else if (choice == 4) {
                portfolio.showPortfolio(market);
            } else if (choice == 5) {
                System.out.println("üöÄ Exiting... Goodbye!");
                break;
            } else {
                System.out.println("‚ùå Invalid choice.");
            }
        }
        sc.close();
    }
}
